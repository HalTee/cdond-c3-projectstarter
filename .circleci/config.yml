version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node. js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install_awscli:
    description: "code to install awscli"
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: "code to install ansible"
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update -y 
            sudo apt install -y software-properties-common 
            sudo apt-add-repository --yes --update ppa:ansible/ansible 
            sudo apt install ansible -y


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} #
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} # Your code here
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Shy2ZnKK3VBARpXDad9D8L/migration_${CIRCLE_WORKFLOW_ID:0:7}
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if(( $SUCCESS==1 )); 
            then
            #  Add revert code here. You can find this in the Getting Started section.
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build             

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0  # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: 
          keys: [frontend-test] # Restore from cache
      - run:
          name: Run frontend test
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test     
        # Your job code here
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            # Your code here
            cd backend
            npm install
            npm run test   

      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: 
          keys: [frontend-test] # Restore from cache
      - run:
          name: Run frontend Scan
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical    
        # Your job code here
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: 
          keys: [backend-test] # Restore from cache
      - run:
          name: Run backend Scan
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical    
        # Your job code here
      - save_cache:
          paths: [frontend/node_modules]
          key: backend-test

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout #  Checkout code from git
      - run: yum install -y tar gzip #  install tar and gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
              fingerprints: ["3b:05:be:10:d3:1c:0f:88:07:02:23:4f:cd:b8:3c:6c"] # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/ # attach workspace
      - install_ansible   
      - install_awscli
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            cat inventory.txt 
            ansible-playbook -i  inventory.txt configure-server.yml # Your code here
            
      - destroy-environment # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      - checkout # Checkout code from git
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install 
            npm run migrations > migrations_dump.txt # Your code here
            
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/Shy2ZnKK3VBARpXDad9D8L/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
            fi
      - revert-migrations # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
              fingerprints: ["3b:05:be:10:d3:1c:0f:88:07:02:23:4f:cd:b8:3c:6c"] # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/ # attach workspace
      - install_nodejs   
      - install_awscli
      - install_ansible 
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text 
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env # your code here

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
              fingerprints: ["3b:05:be:10:d3:1c:0f:88:07:02:23:4f:cd:b8:3c:6c"] # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/ # attach workspace
      - install_nodejs   
      - install_awscli
      - install_ansible

  
      - run:
          name: Deploy backend
          command: |
            cd backend

            npm i
            npm run build
            cd ..

            # Zip the directory
            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../

            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml # your code here

      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: cimg/base:stable # Lightweight Docker image 
    steps:
      - checkout # Checkout code from git
      - install_nodejs   
      - install_awscli
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text 
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi # your code here
      # - destroy-environment
      # - revert-migrations # Here's where you will add some code to rollback on failure  


  cloudfront-update:
    docker:
      - image: amazon/aws-cli  # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dep/save old workflow id to kvdb.io
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            curl https://kvdb.io/Shy2ZnKK3VBARpXDad9D8L/old_workflow_id  -d "${OLD_WORKFLOW_ID}"
            # Fetch the stack names          
           # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  # your code here
      - destroy-environment
      - revert-migrations # Here's where you will add some code to rollback on failure  

  # cleanup:
  #     docker:
  #       - image: cimg/base:stable # Docker image here
  #     steps:
  #       - checkout # Checkout code from git
  #       - install_awscli
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             export STACKS=($(aws cloudformation list-stacks 
  #             --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #             echo Stack names: "${STACKS[@]}"          
            
  #             export OldWorkflowID=$(curl --insecure  https://kvdb.io/Shy2ZnKK3VBARpXDad9D8L/old_workflow_id)
  #             echo Old Workflow ID: $OldWorkflowID

              
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             export OldWorkflowID=$(curl --insecure  https://kvdb.io/Shy2ZnKK3VBARpXDad9D8L/old_workflow_id)
  #             echo Old Workflow ID: $OldWorkflowID

  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" # your code here
  #             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]